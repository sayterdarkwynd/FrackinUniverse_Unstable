

{
  "pieces" : {
    "Full" : {
      "textureSize" : [16, 16],
      "texturePosition" : [16, 16],
	  "variantStride" : [0, 48]
    },
	
	
    "Down" : {
      "textureSize" : [16, 16],
      "texturePosition" : [16, 0],
	  "variantStride" : [0, 48]
    },
    "Left" : {
      "textureSize" : [16, 16],
      "texturePosition" : [32, 16],
	  "variantStride" : [0, 48]
    },
    "Up" : {
      "textureSize" : [16, 16],
      "texturePosition" : [16, 32],
	  "variantStride" : [0, 48]
    },
    "Right" : {
      "textureSize" : [16, 16],
      "texturePosition" : [0, 16],
	  "variantStride" : [0, 48]
    },
	
	
    "OuttieRD" : {
      "textureSize" : [16, 16],
      "texturePosition" : [0, 0],
	  "variantStride" : [0, 48]
    },
    "OuttieLD" : {
      "textureSize" : [16, 16],
      "texturePosition" : [32, 0],
	  "variantStride" : [0, 48]
    },
    "OuttieRU" : {
      "textureSize" : [16, 16],
      "texturePosition" : [0, 32],
	  "variantStride" : [0, 48]
    },
    "OuttieLU" : {
      "textureSize" : [16, 16],
      "texturePosition" : [32, 32],
	  "variantStride" : [0, 48]
    },
	
	
    "InnieLU" : {
      "textureSize" : [16, 16],
      "texturePosition" : [48, 0],
	  "variantStride" : [0, 48]
    },
    "InnieRU" : {
      "textureSize" : [16, 16],
      "texturePosition" : [64, 0],
	  "variantStride" : [0, 48]
    },
    "InnieLD" : {
      "textureSize" : [16, 16],
      "texturePosition" : [48, 16],
	  "variantStride" : [0, 48]
    },
    "InnieRD" : {
      "textureSize" : [16, 16],
      "texturePosition" : [64, 16],
	  "variantStride" : [0, 48]
    },
	
	
    "HorizLine" : {
      "textureSize" : [16, 16],
      "texturePosition" : [48, 32],
	  "variantStride" : [0, 48]
    },
    "VertiLine" : {
      "textureSize" : [16, 16],
      "texturePosition" : [64, 32],
	  "variantStride" : [0, 48]
    },
	
	
    "TurnRD" : {
      "textureSize" : [16, 16],
      "texturePosition" : [80, 0],
	  "variantStride" : [0, 48]
    },
    "TurnLD" : {
      "textureSize" : [16, 16],
      "texturePosition" : [112, 0],
	  "variantStride" : [0, 48]
    },
    "TurnRU" : {
      "textureSize" : [16, 16],
      "texturePosition" : [80, 32],
	  "variantStride" : [0, 48]
    },
    "TurnLU" : {
      "textureSize" : [16, 16],
      "texturePosition" : [112, 32],
	  "variantStride" : [0, 48]
    },
	
	
    "TDown" : {
      "textureSize" : [16, 16],
      "texturePosition" : [96, 0],
	  "variantStride" : [0, 48]
    },
    "TUp" : {
      "textureSize" : [16, 16],
      "texturePosition" : [96, 32],
	  "variantStride" : [0, 48]
    },
    "TRight" : {
      "textureSize" : [16, 16],
      "texturePosition" : [80, 16],
	  "variantStride" : [0, 48]
    },
    "TLeft" : {
      "textureSize" : [16, 16],
      "texturePosition" : [112, 16],
	  "variantStride" : [0, 48]
    },
	
	
    "Plus" : {
      "textureSize" : [16, 16],
      "texturePosition" : [96, 16],
	  "variantStride" : [0, 48]
    },
	
	
    "Point" : {
      "textureSize" : [16, 16],
      "texturePosition" : [128, 16],
	  "variantStride" : [0, 48]
    },
  
  
    "CapUp" : {
      "textureSize" : [16, 16],
      "texturePosition" : [128, 0],
	  "variantStride" : [0, 48]
    },
    "CapDown" : {
      "textureSize" : [16, 16],
      "texturePosition" : [144, 0],
	  "variantStride" : [0, 48]
    },
    "CapRight" : {
      "textureSize" : [16, 16],
      "texturePosition" : [128, 32],
	  "variantStride" : [0, 48]
    },
    "CapLeft" : {
      "textureSize" : [16, 16],
      "texturePosition" : [144, 32],
	  "variantStride" : [0, 48]
    },
	
	
    "FullCenter" : {
      "textureSize" : [16, 16],
      "texturePosition" : [144, 16],
	  "variantStride" : [0, 48]
    },
	
	
    "CombinatorLD" : {
      "textureSize" : [16, 16],
      "texturePosition" : [160, 0],
	  "variantStride" : [0, 48]
    },

    "CombinatorLU" : {
      "textureSize" : [16, 16],
      "texturePosition" : [176, 0],
	  "variantStride" : [0, 48]
    },

    "CombinatorRD" : {
      "textureSize" : [16, 16],
      "texturePosition" : [160, 16],
	  "variantStride" : [0, 48]
    },

    "CombinatorRU" : {
      "textureSize" : [16, 16],
      "texturePosition" : [176, 16],
	  "variantStride" : [0, 48]
    },
	
	
   "CombinatorLUMirror" : {
      "textureSize" : [16, 16],
      "texturePosition" : [192, 0],
	  "variantStride" : [0, 48]
    },

    "CombinatorRUMirror" : {
      "textureSize" : [16, 16],
      "texturePosition" : [208, 0],
	  "variantStride" : [0, 48]
    },

    "CombinatorLDMirror" : {
      "textureSize" : [16, 16],
      "texturePosition" : [192, 16],
	  "variantStride" : [0, 48]
    },

    "CombinatorRDMirror" : {
      "textureSize" : [16, 16],
      "texturePosition" : [208, 16],
	  "variantStride" : [0, 48]
    },
	
	
   "CombinatorComboLD" : {
      "textureSize" : [16, 16],
      "texturePosition" : [160, 32],
	  "variantStride" : [0, 48]
    },

    "CombinatorComboLU" : {
      "textureSize" : [16, 16],
      "texturePosition" : [176, 32],
	  "variantStride" : [0, 48]
    },

    "CombinatorComboRU" : {
      "textureSize" : [16, 16],
      "texturePosition" : [192, 32],
	  "variantStride" : [0, 48]
    },

    "CombinatorComboRD" : {
      "textureSize" : [16, 16],
      "texturePosition" : [208, 32],
	  "variantStride" : [0, 48]
    },
	
	
   "CombinatorTU" : {
      "textureSize" : [16, 16],
      "texturePosition" : [224, 0],
	  "variantStride" : [0, 48]
    },

    "CombinatorTR" : {
      "textureSize" : [16, 16],
      "texturePosition" : [240, 0],
	  "variantStride" : [0, 48]
    },

    "CombinatorTD" : {
      "textureSize" : [16, 16],
      "texturePosition" : [224, 16],
	  "variantStride" : [0, 48]
    },

    "CombinatorTL" : {
      "textureSize" : [16, 16],
      "texturePosition" : [240, 16],
	  "variantStride" : [0, 48]
    },
	
	
   "CrossCut" : {
      "textureSize" : [16, 16],
      "texturePosition" : [224, 32],
	  "variantStride" : [0, 48]
    },

    "CrossCutMirror" : {
      "textureSize" : [16, 16],
      "texturePosition" : [240, 32],
	  "variantStride" : [0, 48]
    }
	
  },
  
  
  

  "representativePiece": "Point",

    "rules" : {
    "EqualsSelf" : {
      "entries" : [
        {
          "type" : "EqualsSelf"
        }
      ]
    },
    "NotEqualsSelf" : {
      "entries" : [
        {
          "type" : "EqualsSelf",
          "inverse" : true
        }
      ]
    },
    "Connects" : {
      "entries" : [
        {
          "type" : "Connects"
        }
      ]
    },
    "Empty" : {
      "entries" : [
        {
          "type" : "Connects",
          "inverse" : true
        }
      ]
    }
  },
  
   "matches" : [
    ["main", [
	
	//Full
	{
    "matchAllPoints" : [
			[[-1, 0], "EqualsSelf"],
			[[-1, -1], "EqualsSelf"],
			[[0, -1], "EqualsSelf"],
			[[1, -1], "EqualsSelf"],
			[[1, 0], "EqualsSelf"],
			[[1, 1], "EqualsSelf"],
			[[0, 1], "EqualsSelf"],
			[[-1, 1], "EqualsSelf"]
    ],
			
		"haltOnSubMatch" : true,
		"subMatches" : [
		
		
      {
				//FullCenter
        "matchAllPoints" : [
        [[-2, -2], "EqualsSelf"],
			  [[-2, -1], "EqualsSelf"],
			  [[-2, 0], "EqualsSelf"],
			  [[-2, 1], "EqualsSelf"],
			  [[-2, 2], "EqualsSelf"],
			  
			  [[-1, 2], "EqualsSelf"],
			  [[0, 2], "EqualsSelf"],
			  [[1, 2], "EqualsSelf"],
			  
			  [[-1, -2], "EqualsSelf"],
			  [[0, -2], "EqualsSelf"],
			  [[1, -2], "EqualsSelf"],
			  
			  [[2, -2], "EqualsSelf"],
			  [[2, -1], "EqualsSelf"],
			  [[2, 0], "EqualsSelf"],
			  [[2, 1], "EqualsSelf"],
			  [[2, 2], "EqualsSelf"]			  
				],
				
				"haltOnMatch" : true,
        "pieces" : [["FullCenter", [-4, -4]]]
      },
					
			{
				"haltOnMatch" : true,
				"pieces" : [["Full", [-4, -4]]]
			}	
    ]
  },	


	
	
	//CrossCut
	{
        "matchAllPoints" : [
          [[-1, 0], "EqualsSelf"],
          [[-1, 1], "NotEqualsSelf"],
          [[0, 1], "EqualsSelf"],
          [[1, 1], "EqualsSelf"],
          [[1, 0], "EqualsSelf"],
          [[1, -1], "NotEqualsSelf"],
          [[0, -1], "EqualsSelf"],
          [[-1, -1], "EqualsSelf"]	  
        ],
		"haltOnMatch" : true,
        "pieces" : [["CrossCut", [-4, -4]]]
    }, 	
	//CrossCutMirror
	{
        "matchAllPoints" : [
          [[-1, 0], "EqualsSelf"],
          [[-1, 1], "EqualsSelf"],
          [[0, 1], "EqualsSelf"],
          [[1, 1], "NotEqualsSelf"],
          [[1, 0], "EqualsSelf"],
          [[1, -1], "EqualsSelf"],
          [[0, -1], "EqualsSelf"],
          [[-1, -1], "NotEqualsSelf"]	  
        ],
		"haltOnMatch" : true,
        "pieces" : [["CrossCutMirror", [-4, -4]]]
    },	

	
	
	//InnieLU
	{
        "matchAllPoints" : [
          [[-1, 0], "EqualsSelf"],
		  [[-1, 1], "NotEqualsSelf"],
		  [[0, 1], "EqualsSelf"],
		  [[1, 1], "EqualsSelf"],
		  [[1, 0], "EqualsSelf"],
		  [[1, -1], "EqualsSelf"],
		  [[0, -1], "EqualsSelf"],
		  [[-1, -1], "EqualsSelf"]
        ],
		"haltOnMatch" : true,
        "pieces" : [["InnieLU", [-4, -4]]]
    },
	//InnieRU
	{
        "matchAllPoints" : [
          [[-1, 0], "EqualsSelf"],
		  [[-1, 1], "EqualsSelf"],
		  [[0, 1], "EqualsSelf"],
		  [[1, 1], "NotEqualsSelf"],
		  [[1, 0], "EqualsSelf"],
		  [[1, -1], "EqualsSelf"],
		  [[0, -1], "EqualsSelf"],
		  [[-1, -1], "EqualsSelf"]
        ],
		"haltOnMatch" : true,
        "pieces" : [["InnieRU", [-4, -4]]]
    },
	//InnieLD
	{
        "matchAllPoints" : [
          [[-1, 0], "EqualsSelf"],
		  [[-1, 1], "EqualsSelf"],
		  [[0, 1], "EqualsSelf"],
		  [[1, 1], "EqualsSelf"],
		  [[1, 0], "EqualsSelf"],
		  [[1, -1], "EqualsSelf"],
		  [[0, -1], "EqualsSelf"],
		  [[-1, -1], "NotEqualsSelf"]
        ],
		"haltOnMatch" : true,
        "pieces" : [["InnieLD", [-4, -4]]]
    },
	//InnieRD
	{
        "matchAllPoints" : [
          [[-1, 0], "EqualsSelf"],
		  [[-1, 1], "EqualsSelf"],
		  [[0, 1], "EqualsSelf"],
		  [[1, 1], "EqualsSelf"],
		  [[1, 0], "EqualsSelf"],
		  [[1, -1], "NotEqualsSelf"],
		  [[0, -1], "EqualsSelf"],
		  [[-1, -1], "EqualsSelf"]
        ],
		"haltOnMatch" : true,
        "pieces" : [["InnieRD", [-4, -4]]]
    },
	
	

	
		{
      "matchAllPoints" : [
				[[0, -1], "EqualsSelf"],
				[[1, 0], "EqualsSelf"],
				[[-1, 0], "EqualsSelf"],
				[[-1, -1], "EqualsSelf"],
				[[1, -1], "EqualsSelf"]
      ],

			"haltOnSubMatch" : true,
			"subMatches" : [
			
				//Down
				{
					"matchAllPoints" : [
          [[0, 1], "NotEqualsSelf"]
					],				
					"haltOnMatch" : true,
					"pieces" : [["Down", [-4, -4]]]					
				},
				
				//CombinatorTD
				{
					"haltOnMatch" : true,
					"pieces" : [["CombinatorTD", [-4, -4]]]
				}
			]
    },
		{
      "matchAllPoints" : [
				[[0, 1], "EqualsSelf"],
				[[1, 0], "EqualsSelf"],
				[[-1, 0], "EqualsSelf"],
				[[-1, 1], "EqualsSelf"],
				[[1, 1], "EqualsSelf"]
      ],

			"haltOnSubMatch" : true,
			"subMatches" : [
			
				//Up
				{
					"matchAllPoints" : [
          [[0, -1], "NotEqualsSelf"]
					],				
					"haltOnMatch" : true,
					"pieces" : [["Up", [-4, -4]]]					
				},
				
				//CombinatorTU
				{
					"haltOnMatch" : true,
					"pieces" : [["CombinatorTU", [-4, -4]]]
				}
			]
    },
		{
      "matchAllPoints" : [
        [[-1, 0], "EqualsSelf"],
				[[0, 1], "EqualsSelf"],
				[[0, -1], "EqualsSelf"],
				[[-1, 1], "EqualsSelf"],
				[[-1, -1], "EqualsSelf"]
      ],

			"haltOnSubMatch" : true,
			"subMatches" : [
			
				//Left
				{
					"matchAllPoints" : [
          [[1, 0], "NotEqualsSelf"]
					],				
					"haltOnMatch" : true,
					"pieces" : [["Left", [-4, -4]]]					
				},
				
				//CombinatorTL
				{
					"haltOnMatch" : true,
					"pieces" : [["CombinatorTL", [-4, -4]]]
				}
			]
    },
		{
      "matchAllPoints" : [
				[[1, 0], "EqualsSelf"],
				[[0, 1], "EqualsSelf"],
				[[0, -1], "EqualsSelf"],
				[[1, 1], "EqualsSelf"],
				[[1, -1], "EqualsSelf"]
      ],

			"haltOnSubMatch" : true,
			"subMatches" : [
			
				//Right
				{
					"matchAllPoints" : [
					[[-1, 0], "NotEqualsSelf"]	  
					],				
					"haltOnMatch" : true,
					"pieces" : [["Right", [-4, -4]]]					
				},
				
				//CombinatorTR
				{
					"haltOnMatch" : true,
					"pieces" : [["CombinatorTR", [-4, -4]]]
				}
			]
    },
	
	

	

		{
      "matchAllPoints" : [
        [[-1, 0], "EqualsSelf"],
				[[0, -1], "EqualsSelf"],
				[[-1, -1], "EqualsSelf"]
      ],
			
			"haltOnSubMatch" : true,
			"subMatches" : [
			
				//OuttieLD
				{
					"matchAllPoints" : [
						[[0, 1], "NotEqualsSelf"],
						[[1, 0], "NotEqualsSelf"]
					],		
					"haltOnMatch" : true,
					"pieces" : [["OuttieLD", [-4, -4]]]					
				},
			
				//CombinatorLD
				{
					"matchAllPoints" : [
						[[0, 1], "NotEqualsSelf"]	  
					],
					"haltOnMatch" : true,
					"pieces" : [["CombinatorLD", [-4, -4]]]
				},		
				
				//CombinatorLDMirror	  
				{
					"matchAllPoints" : [
						[[1, 0], "NotEqualsSelf"] 
					],
					"haltOnMatch" : true,
					"pieces" : [["CombinatorLDMirror", [-4, -4]]]
				},	
				
				//CombinatorComboLD
				{
					"haltOnMatch" : true,
					"pieces" : [["CombinatorComboLD", [-4, -4]]]
				}				
			]
		},	
	
	

		{
      "matchAllPoints" : [
        [[1, 0], "EqualsSelf"],
				[[0, -1], "EqualsSelf"],
				[[1, -1], "EqualsSelf"]
      ],
			
			"haltOnSubMatch" : true,
			"subMatches" : [
			
				//OuttieRD
				{
					"matchAllPoints" : [
						[[0, 1], "NotEqualsSelf"],
						[[-1, 0], "NotEqualsSelf"]
					],		
					"haltOnMatch" : true,
					"pieces" : [["OuttieRD", [-4, -4]]]					
				},
			
				//CombinatorRD
				{
					"matchAllPoints" : [
						[[-1, 0], "NotEqualsSelf"]	  
					],
					"haltOnMatch" : true,
					"pieces" : [["CombinatorRD", [-4, -4]]]
				},		
				
				//CombinatorRDMirror	  
				{
					"matchAllPoints" : [
						[[0, 1], "NotEqualsSelf"] 
					],
					"haltOnMatch" : true,
					"pieces" : [["CombinatorRDMirror", [-4, -4]]]
				},	
				
				//CombinatorComboRD
				{
					"haltOnMatch" : true,
					"pieces" : [["CombinatorComboRD", [-4, -4]]]
				}				
			]
		},
	
	
	
 		{
      "matchAllPoints" : [
        [[-1, 0], "EqualsSelf"],
				[[0, 1], "EqualsSelf"],
				[[-1, 1], "EqualsSelf"]
      ],
			
			"haltOnSubMatch" : true,
			"subMatches" : [
			
				//OuttieLU
				{
					"matchAllPoints" : [
						[[0, -1], "NotEqualsSelf"],
						[[1, 0], "NotEqualsSelf"]
					],		
					"haltOnMatch" : true,
					"pieces" : [["OuttieLU", [-4, -4]]]					
				},
			
				//CombinatorLU
				{
					"matchAllPoints" : [
						[[1, 0], "NotEqualsSelf"]	  
					],
					"haltOnMatch" : true,
					"pieces" : [["CombinatorLU", [-4, -4]]]
				},		
				
				//CombinatorLUMirror	  
				{
					"matchAllPoints" : [
						[[0, -1], "NotEqualsSelf"] 
					],
					"haltOnMatch" : true,
					"pieces" : [["CombinatorLUMirror", [-4, -4]]]
				},	
				
				//CombinatorComboLU
				{
					"haltOnMatch" : true,
					"pieces" : [["CombinatorComboLU", [-4, -4]]]
				}				
			]
		},
		

		
 		{
      "matchAllPoints" : [
        [[1, 0], "EqualsSelf"],
				[[0, 1], "EqualsSelf"],
				[[1, 1], "EqualsSelf"]
      ],
			
			"haltOnSubMatch" : true,
			"subMatches" : [
			
				//OuttieRU
				{
					"matchAllPoints" : [
						[[0, -1], "NotEqualsSelf"],
						[[-1, 0], "NotEqualsSelf"]
					],		
					"haltOnMatch" : true,
					"pieces" : [["OuttieRU", [-4, -4]]]					
				},
			
				//CombinatorRU
				{
					"matchAllPoints" : [
						[[0, -1], "NotEqualsSelf"]	  
					],
					"haltOnMatch" : true,
					"pieces" : [["CombinatorRU", [-4, -4]]]
				},		
				
				//CombinatorRUMirror	  
				{
					"matchAllPoints" : [
						[[-1, 0], "NotEqualsSelf"] 
					],
					"haltOnMatch" : true,
					"pieces" : [["CombinatorRUMirror", [-4, -4]]]
				},	
				
				//CombinatorComboRU
				{
					"haltOnMatch" : true,
					"pieces" : [["CombinatorComboRU", [-4, -4]]]
				}				
			]
		},		

		



	
	
	
	//TDown
	{
        "matchAllPoints" : [
          [[1, 0], "EqualsSelf"],
		  [[-1, 0], "EqualsSelf"],
		  [[0, -1], "EqualsSelf"],
		  [[0, 1], "NotEqualsSelf"]
		  
        ],
		"haltOnMatch" : true,
        "pieces" : [["TDown", [-4, -4]]]
    },		
	//TUp
	{
        "matchAllPoints" : [
          [[1, 0], "EqualsSelf"],
		  [[-1, 0], "EqualsSelf"],
		  [[0, 1], "EqualsSelf"],
		  [[0, -1], "NotEqualsSelf"]
		  
        ],
		"haltOnMatch" : true,
        "pieces" : [["TUp", [-4, -4]]]
    },		
	//TLeft
	{
        "matchAllPoints" : [
          [[0, 1], "EqualsSelf"],
		  [[0, -1], "EqualsSelf"],
		  [[-1, 0], "EqualsSelf"],
		  [[1, 0], "NotEqualsSelf"]
		  
        ],
		"haltOnMatch" : true,
        "pieces" : [["TLeft", [-4, -4]]]
    },			
	//TRight
	{
        "matchAllPoints" : [
          [[0, 1], "EqualsSelf"],
		  [[0, -1], "EqualsSelf"],
		  [[1, 0], "EqualsSelf"],
		  [[-1, 0], "NotEqualsSelf"]
		  
        ],
		"haltOnMatch" : true,
        "pieces" : [["TRight", [-4, -4]]]
    },
	
	
	
	//TurnRD
	{
        "matchAllPoints" : [
          [[1, 0], "EqualsSelf"],
		  [[0, -1], "EqualsSelf"],
		  [[-1, 0], "NotEqualsSelf"],
		  [[0, 1], "NotEqualsSelf"]
		  
        ],
		"haltOnMatch" : true,
        "pieces" : [["TurnRD", [-4, -4]]]
    },
	//TurnLD
	{
        "matchAllPoints" : [
          [[-1, 0], "EqualsSelf"],
		  [[0, -1], "EqualsSelf"],
		  [[1, 0], "NotEqualsSelf"],
		  [[0, 1], "NotEqualsSelf"]
		  
        ],
		"haltOnMatch" : true,
        "pieces" : [["TurnLD", [-4, -4]]]
    },
	//TurnRU
	{
        "matchAllPoints" : [
          [[1, 0], "EqualsSelf"],
		  [[0, 1], "EqualsSelf"],
		  [[-1, 0], "NotEqualsSelf"],
		  [[0, -1], "NotEqualsSelf"]
		  
        ],
		"haltOnMatch" : true,
        "pieces" : [["TurnRU", [-4, -4]]]
    },
	//TurnLU
	{
        "matchAllPoints" : [
          [[-1, 0], "EqualsSelf"],
		  [[0, 1], "EqualsSelf"],
		  [[1, 0], "NotEqualsSelf"],
		  [[0, -1], "NotEqualsSelf"]
		  
        ],
		"haltOnMatch" : true,
        "pieces" : [["TurnLU", [-4, -4]]]
    },
	
	
	
	//Point
	{
        "matchAllPoints" : [
          [[1, 0], "NotEqualsSelf"],
		  [[-1, 0], "NotEqualsSelf"],
		  [[0, 1], "NotEqualsSelf"],
		  [[0, -1], "NotEqualsSelf"]
        ],
		"haltOnMatch" : true,
        "pieces" : [["Point", [-4, -4]]]
    },
	
	
	
	//CapRight
	{
        "matchAllPoints" : [
          [[1, 0], "NotEqualsSelf"],
          [[0, 1], "NotEqualsSelf"],
		  [[0, -1], "NotEqualsSelf"]
        ],
		"haltOnMatch" : true,
        "pieces" : [["CapRight", [-4, -4]]]
    },	
	
	//CapLeft
	{
        "matchAllPoints" : [
          [[-1, 0], "NotEqualsSelf"],
          [[0, 1], "NotEqualsSelf"],
		  [[0, -1], "NotEqualsSelf"]
        ],
		"haltOnMatch" : true,
        "pieces" : [["CapLeft", [-4, -4]]]
    },

	
	//HorizLine
	{
        "matchAllPoints" : [
          [[0, 1], "NotEqualsSelf"],
		  [[0, -1], "NotEqualsSelf"]
        ],
		"haltOnMatch" : true,
        "pieces" : [["HorizLine", [-4, -4]]]
	},		
		
		
	//CapDown
	{
        "matchAllPoints" : [
          [[0, -1], "NotEqualsSelf"],
          [[1, 0], "NotEqualsSelf"],
		  [[-1, 0], "NotEqualsSelf"]
        ],
		"haltOnMatch" : true,
        "pieces" : [["CapDown", [-4, -4]]]
    },	
	
	//CapUp
	{
        "matchAllPoints" : [
          [[0, 1], "NotEqualsSelf"],
          [[1, 0], "NotEqualsSelf"],
		  [[-1, 0], "NotEqualsSelf"]
        ],
		"haltOnMatch" : true,
        "pieces" : [["CapUp", [-4, -4]]]
    },
	
 	
	//VertiLine
	{
        "matchAllPoints" : [
          [[1, 0], "NotEqualsSelf"],
		  [[-1, 0], "NotEqualsSelf"]
        ],
		"haltOnMatch" : true,
        "pieces" : [["VertiLine", [-4, -4]]]

    },		
		
		
		
	//Plus
	{
        "matchAllPoints" : [
          [[1, 1], "NotEqualsSelf"],
		  [[1, -1], "NotEqualsSelf"],
		  [[-1, 1], "NotEqualsSelf"],
		  [[-1, -1], "NotEqualsSelf"]
        ],
		"haltOnMatch" : true,
        "pieces" : [["Plus", [-4, -4]]]
    }



	
	]]
	]
}












//Made by Cgeta: http://community.playstarbound.com/members/cgeta.68988/






